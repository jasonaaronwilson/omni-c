#!/bin/bash

# Simple configure script for omni-c

readonly CONFIGURE_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="${CONFIGURE_SCRIPT_DIR}"

IS_MAC_OS=false
BREW_GC_PREFIX=""

if [[ "$(uname -s)" == "Darwin" ]]; then
  echo "Configuring for macOS assuming you have installed bdw-gc and lua via brew."
  IS_MAC_OS=true
  BREW_GC_PREFIX=`brew --prefix bdw-gc`
else
  echo "This script is not running on macOS. OS Type: $(uname -s)"
  # Add commands for other operating systems here (e.g., Linux)
fi

BUILD_DIR="${PROJECT_ROOT}/build-dir"

# --- Functions ---

# Display usage information
help() {
  cat << EOF
Usage: $0 [OPTIONS]

Configures the omni-c build environment.

Options:
  --build-dir DIR   Specify the build directory (default: build-dir)
  --help            Display this help message

Examples:
  ./scripts/configure
  ./scripts/configure --build-dir ../omni-c-build
EOF
  exit 0
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --build-dir)
      BUILD_DIR="$2"
      shift 2
      ;;
    --help)
      help
      ;;
    *)
      echo "Unknown option: $1"
      help
      ;;
  esac
done

# --- Main Script ---

[ -n "${PROJECT_ROOT%/}" ] || { echo "Error: PROJECT_ROOT must not end in a slash. Value: '${PROJECT_ROOT}'" >&2; exit 1; }
[ -n "${BUILD_DIR%/}" ] || { echo "Error: BUILD_DIR must not end in a slash. Value: '${BUILD_DIR}'" >&2; exit 1; }

# Create the actual build directory if it doesn't exist
mkdir -p "${BUILD_DIR}"

# Update the 'build' symlink
ln -sf "${BUILD_DIR}" "${PROJECT_ROOT}/build"

echo "Configuration:"
echo "  Project root: ${PROJECT_ROOT}"
echo "  Build directory: ${BUILD_DIR}"
echo "  Build symlink: ${PROJECT_ROOT}/build"

# Create a config file for the Makefile to use (optional)
cat > "${BUILD_DIR}/config.mk" << EOF
# Generated by configure

OMNI_C_ROOT := ${PROJECT_ROOT}
BUILD_DIR := ${BUILD_DIR}
IS_MAC_OS := ${IS_MAC_OS}
BREW_GC_PREFIX := ${BREW_GC_PREFIX}

EOF

echo "Configuration complete. Run 'make' to build."
