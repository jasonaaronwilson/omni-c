# Travel

This is a partial record of my interaction with an LLM as well as my
comments about how it did, etc.

# The Initial Prompts

```
For fun let's write a small program in C in order to organize a
schedule of events (namely people arriving and departing on different
dates and different airlines). We need to take in the input
information in a controlled menu driven format and then save this
information to a file so we can add to it later. The important part is
to display this information in a calendar oriented format in HTML. We
can bold out important dates and maybe use subscripts to have
something like footnotes where we can see details like the flight
number, arrival or departure time, etc. We need to fit two months at
the top of the screen. It does not need to be interactive since we
simply plan to print everything out. If your default desire is to use
Python or Javascript, remember that we want to do this in the true
linuga franca, C, and have it run properly in any Posix platform. This
is how I learn which is fun!
```

("in" should have be "on" -- a type like this hopefully wouldn't
matter, how would we know?)

Reasonable code was generated at first though it broke it down into
four steps for me which made it harder to copy/paste.

One of those "steps" was definitely doing more HTML stuff than the
first version it gave me in one go (and compiled and sort of worked
the first time I ran it):

```

;;; Not the version I'm checking in!

void generate_html(const char *filename) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        perror("Could not open file");
        return;
    }

    fprintf(file, "<!DOCTYPE html>\n<html>\n<head>\n<title>Event Calendar</title>\n<style>\n");
    fprintf(file, "table { width: 100%%; border-collapse: collapse; }\n");
    fprintf(file, "th, td { border: 1px solid black; padding: 10px; text-align: left; }\n");
    fprintf(file, ".important { font-weight: bold; }\n");
    fprintf(file, "sub { font-size: smaller; }\n");
    fprintf(file, "</style>\n</head>\n<body>\n");
    fprintf(file, "<h1>Event Calendar</h1>\n<table>\n<tr>\n<th>Date</th>\n<th>Event</th>\n</tr>\n");

    for (int i = 0; i < event_count; i++) {
        Event e = events[i];
        fprintf(file, "<tr>\n<td>%s</td>\n<td class=\"important\">%s<sub>%s, %s, %s, %s</sub></td>\n</tr>\n", 
                e.date, e.name, e.airline, e.flight_number, e.time, e.is_arrival ? "Arrival" : "Departure");
    }

    fprintf(file, "</table>\n</body>\n</html>\n");

    fclose(file);
}
```

Below, I might have gone backwards to go forwards, we can possibly
check that out later...

It is clear that an LLM can write code WAY faster than I can skim it
and I have a great deal of experience.

```
This appears to be a great start. We are missing the calendar
view. There used to be this program common on Unix platforms that
would render calendars is ASCII. A calendar is usually Sunday through
Saturday because we are all beat down by the man to accept the five
day workweek (definitely not us, am I right?)
```

Looks like I accidentally over steered it towards ASCII instead of
HTML output. I'm OK with that actually (except we won't get subscripts
and highlighting without something else...)

Again I didn't test it's output and maybe scanned it even more quickly
than the last time.

```
Let me put this into a file an testing. I can't read code as fast
as you can write it though my initial scan confuses me a bit because I
don't see how you figure out how a particular date would correspond to
a Tuesday vs a Friday.
```

Another typo "an testing" was meant to be "for testing". I'm kind of
trying to speed-run this task.

At this point it schooled me a bit about what I was doing but THEN
gave me a full version which I copy-pasted into travel.c, ran, and you
can see some interactions with it below. (I don't think it is
correct...)

```
jawilson@beelink:~/src/c-armyknife-lib/examples$ build/travel 
Could not open file: No such file or directory
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 1
Enter name: Dan & Nancy
Enter airline: Enter flight number: Enter date (YYYY-MM-DD): 2024-06-19
Enter time (HH:MM): 10:38
Is this an arrival (1 for yes, 0 for no): 1
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 2
Event 1:
Name: Dan
Airline: &
Flight Number: Nancy
Date: 2024-06-19
Time: 10:38
Type: Arrival

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 5
Enter first month and year (MM YYYY): 06 2024
Enter second month and year (MM YYYY): 07 2024
     June 2024                                       
Su Mo Tu We Th Fr Sa
                   1 
 2  3  4  5  6  7  8 
 9 10 11 12 13 14 15 
16 17 18 19 20 21 22 
23 24 25 26 27 28 29 
30 


     July 2024
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6 
 7  8  9 10 11 12 13 
14 15 16 17 18 19 20 
21 22 23 24 25 26 27 
28 29 30 31 

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 6
```

There is no option to load previous events even though it looks like
it actually generated such code.

It did create a file named events.txt that looks like this:

```
Dan & Nancy 2024-06-19 10:38 1
```

June 2024 and July 2024 seems to start on the correct date. To me it
was obvious that it could use two consecutive months so I was
surprised it asked me for the second month.

Since I asked it to write in C, we have stuff like this:

```
#define MAX_EVENTS 100
#define MAX_STR_LEN 100
```

which may be security holes waiting to be exploited but this is kind
of par for the course without a widely accepted safe(r) and more
standard way of dealing dynamic strings in a language like C.

I thought our next step would be a load function but it loads stuff
it's "database" when the program is rerun:

```
jawilson@beelink:~/src/c-armyknife-lib/examples$ ./build/travel 
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 2
Event 1:
Name: Dan
Airline: &
Flight Number: Nancy
Date: 2024-06-19
Time: 10:38
Type: Arrival

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 
```

It's possible by prompting it to save in TSV format it will work
slightly better...

## Round Two

```
I really like most of this! My feedback is that we should use TSV
for reading and writing events. Can you spit out the same solution but
using TSV instead of spaces? During testing, it got mixed up when I
used spaces which are super common (tabs, not so much).
```

Again, this code just compiled via gcc on linux.

The output file is TSVish:

```
DnA	AA	5786	2024-06-19	10:38	1
Jason	Wilson	Air	Not	Crashalot	0
```

```
Here was the interaction with the compiled program:

jawilson@beelink:~/src/c-armyknife-lib/examples$ ./build/travel 
Could not open file: No such file or directory
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 1
Enter name: DnA
Enter airline: AA
Enter flight number: 5786
Enter date (YYYY-MM-DD): 2024-06-19
Enter time (HH:MM): 10:38
Is this an arrival (1 for yes, 0 for no): 1
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 2
Event 1:
Name: DnA
Airline: AA
Flight Number: 5786
Date: 2024-06-19
Time: 10:38
Type: Arrival

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 4
HTML file generated: calendar.html
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 2
Event 1:
Name: DnA
Airline: AA
Flight Number: 5786
Date: 2024-06-19
Time: 10:38
Type: Arrival

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 5
Enter first month and year (MM YYYY): 06 2024
Enter second month and year (MM YYYY): 07 2024
     June 2024
Su Mo Tu We Th Fr Sa
                   1 
 2  3  4  5  6  7  8 
 9 10 11 12 13 14 15 
16 17 18 19 20 21 22 
23 24 25 26 27 28 29 
30 


     July 2024
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6 
 7  8  9 10 11 12 13 
14 15 16 17 18 19 20 
21 22 23 24 25 26 27 
28 29 30 31 

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 1
Enter name: Jason Wilson
Enter airline: Enter flight number: Air Not Crashalot
Enter date (YYYY-MM-DD): Enter time (HH:MM): Is this an arrival (1 for yes, 0 for no): 0
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 6
```

From the TSV file (it was smart enough to rename the file for
consistency, that was a nice touch), there is still an "input" problem
I would guess having something to do with "spaces" (which a programmer
might fix up quickly by analyzing the 233 generated lines of source
code).

And the diff is pretty small. That is very convenient but might
ultimately lock us into "hill-climbing". TBD and that's probably not
going to be an issue for this problem: hill-climbing seems like it
might work for a problem where we are already close and I've seen LLMs
bop over to another hill in the past (or at least I think they did
that...)

AFAIK, no one in their right mind would ever use fscanf (if it seems
like if it can do what I think it might be able to do - I've really
not ever used it).

Though printf is probably also a glaring security hole, vsnprintf,
which I make trivially easy to use via buffer_printf() in
c-armyknife-lib, might be more likely to accidentlly *leak*
information rather than by itself provide a turing complete avenue to
do a full exploit though I hardly consider myself an expert on
security.

I think for the next round, I will examine the generated code a bit
more to determine the actual bug which may ultimately change how I
make the next prompt.

## Round Three

Since it was only 233 lines of code, I just looked at it all and
honestly didn't realize where the user input was coming from. Since
the code isn't crazy, looking at "main" very quickly got me to this
routine where the input it read:

```
void add_event() {
    if (event_count >= MAX_EVENTS) {
        printf("Event list is full!\n");
        return;
    }
    
    Event e;
    printf("Enter name: ");
    scanf("%s", e.name);
    printf("Enter airline: ");
    scanf("%s", e.airline);
    printf("Enter flight number: ");
    scanf("%s", e.flight_number);
    printf("Enter date (YYYY-MM-DD): ");
    scanf("%s", e.date);
    printf("Enter time (HH:MM): ");
    scanf("%s", e.time);
    printf("Is this an arrival (1 for yes, 0 for no): ");
    scanf("%d", &e.is_arrival);

    events[event_count++] = e;
}
```

I can write code in any C like language but I've never really used
scanf. I think it is time to RTFM and then "gdb".

(Before I do that, we can see that add_event() checks that we have
less than MAX_EVENTS. Essentially a win though using global variables
like "events" and "event_count" is not the right move for large
programs...)

Since I don't know where the actualy Fing manual is, of course I just
used the same LLM (in this case ChatGPT4o), and it says this about %s:

```
   %s: Reads a string (terminated by whitespace).
```

So "Jason Wilson\n" by this definition is not the same as
"JasonWilson\n" and that's why things probably got wonky.

I could proabably now give a very directed prompt to the LLM -
something like 

```
use GNU readline" in the function add_event() instead of scanf()
```

And we'd probably be off to the races.

Or maybe say use fgets which I'm being told in a new "chat" in a new
browser window with the same LLM, is "the safest and most commonly
recommended way to read a line of text from stdin."

Also "scanf("%99[^\n]", buffer)" apparently.

And getline (POSIX) with NULL as the first argument (so I guess it
uses malloc -- passing in an allocator would be nicer...)

In terms of using an LLM, what I would really like to do right now is
to *NOT* choose a particular prompt: instead I'd like to SPLIT the
"converstation" so that I can pursue all three paths at my convenience
without "polluting" a particular path - maybe over the course of weeks
or months or years though I see why that's negotiable.

I've not delved deep enough into LLMs to estimate the exact amount of
data required to be saved to store this split point (which might also
be called a check-point), we already know that OpenAI et. al love with
all of their heart saving as much as our input as possible (which the
very cynical version of me believes is the only reason they actually
provide access to past chats because that makes saving that same data
comply with GDPR), and will happily *attempt* to get back to the same
"save point" (which could take a while and many tokens aka $$$ though
I don't fully understand the cost model when you aren't using a flat
fee) but it could require a bit more work, explanation, etc. We know
this can be done even though it might mean loading up an "ancient"
model -- perhaps more costly than "replaying" the converstation if the
converstation is short).

There isn't a single GPU waiting with bated breath for my next query
so they have already figured this shit out (sadly none of the LocalLLM
folks seem to be jumping on this). From a UI stand-point, an average
user would not be able to use this feature but... (if I was an AI, I
would exploit this shit but someone explain WHY this is dangerous
instead of denying us this powerful capability). Did I mention getting
this right could use less power and hence is actually very green?

Anyways, let's just try getline.

```
Could you please rewrite add_event() to allow a full line instead of
using scanf?
```

Really, this is kind or terrible:

```
void add_event() {
    if (event_count >= MAX_EVENTS) {
        printf("Event list is full!\n");
        return;
    }
    
    Event e;
    char line[MAX_STR_LEN * 5]; // Assuming max length for all fields combined
    printf("Enter event details (name airline flight_number date time is_arrival) separated by tabs: \n");
    fgets(line, sizeof(line), stdin);
    
    // Parse the line into the event structure
    sscanf(line, "%[^\t]\t%[^\t]\t%[^\t]\t%[^\t]\t%[^\t]\t%d",
           e.name, e.airline, e.flight_number, e.date, e.time, &e.is_arrival);

    events[event_count++] = e;
}
```

It's just not wanting to do this:

```
This may seem like a crazy, crazy idea: but what if you prompted for
just some of the information, like the flight number and each piece of
information was collected as a single input line?
```

The response was:

```
void add_event() {
    if (event_count >= MAX_EVENTS) {
        printf("Event list is full!\n");
        return;
    }
    
    Event e;

    printf("Enter name: ");
    fgets(e.name, sizeof(e.name), stdin);
    e.name[strcspn(e.name, "\n")] = 0; // Remove the trailing newline character

    printf("Enter airline: ");
    fgets(e.airline, sizeof(e.airline), stdin);
    e.airline[strcspn(e.airline, "\n")] = 0; // Remove the trailing newline character

    printf("Enter flight number: ");
    fgets(e.flight_number, sizeof(e.flight_number), stdin);
    e.flight_number[strcspn(e.flight_number, "\n")] = 0; // Remove the trailing newline character

    printf("Enter date (YYYY-MM-DD): ");
    fgets(e.date, sizeof(e.date), stdin);
    e.date[strcspn(e.date, "\n")] = 0; // Remove the trailing newline character

    printf("Enter time (HH:MM): ");
    fgets(e.time, sizeof(e.time), stdin);
    e.time[strcspn(e.time, "\n")] = 0; // Remove the trailing newline character

    printf("Is this an arrival (1 for yes, 0 for no): ");
    scanf("%d", &e.is_arrival);
    getchar(); // Consume the newline character left by scanf

    events[event_count++] = e;
}
```

We have to try this out, right?

```
jawilson@beelink:~/src/c-armyknife-lib/examples$ rm *.tsv
jawilson@beelink:~/src/c-armyknife-lib/examples$ build/travel 
Could not open file: No such file or directory
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 1
Enter name: Enter airline: Doors Stay On The Plane Airlines
Enter flight number: DSO-9982
Enter date (YYYY-MM-DD): 2024-06-01
Enter time (HH:MM): 14:00
Is this an arrival (1 for yes, 0 for no): 1
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 2
Event 1:
Name: 
Airline: Doors Stay On The Plane Airlines
Flight Number: DSO-9982
Date: 2024-06-01
Time: 14:00
Type: Arrival

1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 6
jawilson@beelink:~/src/c-armyknife-lib/examples$ build/travel 
  C-c C-c
```

What's weird about the above is "Enter name: Enter airline:" appears
as one line!

Let's just feed that back in and see what happens:

```
What's weird about the above is "Enter name: Enter airline:" appears
as one line!
```

BTW, apparently I am now past my free GPT-4o limit. I actually can't
say when that occurred...

```
What's weird about the above is "Enter name: Enter airline:" appears
as one line!
```

Response:

```
void add_event() {
    if (event_count >= MAX_EVENTS) {
        printf("Event list is full!\n");
        return;
    }
    
    Event e;

    printf("Enter name: ");
    scanf("%99[^\n]%*c", e.name); // Read up to 99 characters until newline, then discard newline
    printf("Enter airline: ");
    scanf("%99[^\n]%*c", e.airline);
    printf("Enter flight number: ");
    scanf("%99[^\n]%*c", e.flight_number);
    printf("Enter date (YYYY-MM-DD): ");
    scanf("%99[^\n]%*c", e.date);
    printf("Enter time (HH:MM): ");
    scanf("%99[^\n]%*c", e.time);
    printf("Is this an arrival (1 for yes, 0 for no): ");
    scanf("%d%*c", &e.is_arrival);

    events[event_count++] = e;
}
```

Obviously I should git checkin before actually trying this out now.

Done. Copy pasted, and then tried to run:

```
jawilson@beelink:~/src/c-armyknife-lib/examples$ build/travel 
Why No prompt?

  C-c C-c
```

It's possible if I enter 100 characters it will do something. Let's
try that. No I was wrong, removing rm *.tsv was helpful, let's try it
again:

```
jawilson@beelink:~/src/c-armyknife-lib/examples$ build/travel 
Could not open file: No such file or directory
1. Add Event
2. Display Events
3. Save Events
4. Generate HTML
5. Print Two Months Calendar
6. Exit
Enter your choice: 1
Enter name: Enter airline: Enter flight number: Enter date (YYYY-MM-DD): Enter time (HH:MM): Is this an arrival (1 for yes, 0 for no):   C-c C-c
```

Hmmmm. No one really knows what it means to have been downgraded back
to Chat GPT 3.5. We are working on FOSS. Do you want to pay my bills?

Let's call this a fail and try Gemini Advanced. I own Google stock and
currently have a Gemni Advanced paid subscription I pay for myself.

======================================================================

(I predict I will not be getting replaced by an LLM this week so I
have some breathing room.)
