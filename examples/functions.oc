// ======================================================================
// Prototypes Are Not Necessary To Write but can be written anyways or
// parsed from C...
// ======================================================================

// prototype with just a singe arg
int foo(int);

// prototype with just a singe arg and name
int foo(int arg0);

/* Stuff that should work already unless a regression. */

// prototype with no argument types
int foo();

// prototype with no argument types
int foo(void);

// A more complicated prototype
buffer_t* buffer_append_human_readable_error(buffer_t* buffer,
                                             compiler_error_t* error);

// ======================================================================
// At this time any function body that are legal tokens and properly
// match up it's delimiters can be parsed correctly but eventually we
// will need to fully parse them.
// ======================================================================

// The simplest function?
int one() {
  return 1;
}

// A slightly more complicated function
int two(int a, int b) {
  if (a > b) {
    return a + 1;
  }
  do {
    b += 1;
  } while (2);
  return a + b;
}

static void foo(void) {
}

extern void foo2(void) {
}

static inline int compute_value(int a, int b) {
    return a + b;
}

// Not the preferred order but I think gcc would accept this...
inline static int compute_value(int a, int b) {
    return a + b;
}

// Correct and conventional order?
static inline __attribute__((warn_unused_result)) int compute_value(int a, int b) {
    return a + b;
}

// not inlined but static with attribute
static __attribute__((warn_unused_result)) int compute_value(int a, int b) {
    return a + b;
}

// not inlined but extern with attribute
extern __attribute__((warn_unused_result)) int compute_value(int a, int b) {
    return a + b;
}

/*
// GCC allows this, though it is less conventional
__attribute__((warn_unused_result)) static inline int compute_value(int a, int b) {
    return a + b;
}
*/

